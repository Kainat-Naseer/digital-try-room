[{"C:\\Users\\UsmanFayyaz\\React apps\\digital-try-room\\src\\index.js":"1","C:\\Users\\UsmanFayyaz\\React apps\\digital-try-room\\src\\App.js":"2","C:\\Users\\UsmanFayyaz\\React apps\\digital-try-room\\src\\serviceWorkerRegistration.js":"3","C:\\Users\\UsmanFayyaz\\React apps\\digital-try-room\\src\\reportWebVitals.js":"4","C:\\Users\\UsmanFayyaz\\React apps\\digital-try-room\\src\\pages\\login.js":"5","C:\\Users\\UsmanFayyaz\\React apps\\digital-try-room\\src\\pages\\SignUp.js":"6","C:\\Users\\UsmanFayyaz\\React apps\\digital-try-room\\src\\pages\\ForgetPassword.js":"7","C:\\Users\\UsmanFayyaz\\React apps\\digital-try-room\\src\\pages\\Home.js":"8","C:\\Users\\UsmanFayyaz\\React apps\\digital-try-room\\src\\pages\\instructions\\FirstStepIntructions.js":"9","C:\\Users\\UsmanFayyaz\\React apps\\digital-try-room\\src\\pages\\imageCapture\\FirstImageCapture.js":"10","C:\\Users\\UsmanFayyaz\\React apps\\digital-try-room\\src\\pages\\instructions\\SecondStepIntructions.js":"11","C:\\Users\\UsmanFayyaz\\React apps\\digital-try-room\\src\\pages\\imageCapture\\SecondImageCapture.js":"12","C:\\Users\\UsmanFayyaz\\React apps\\digital-try-room\\src\\components\\nav.js":"13","C:\\Users\\UsmanFayyaz\\React apps\\digital-try-room\\src\\pages\\Measurements.js":"14"},{"size":908,"mtime":1611947858237,"results":"15","hashOfConfig":"16"},{"size":1181,"mtime":1619904601322,"results":"17","hashOfConfig":"16"},{"size":5201,"mtime":1611947858241,"results":"18","hashOfConfig":"16"},{"size":377,"mtime":1611947858239,"results":"19","hashOfConfig":"16"},{"size":1928,"mtime":1619904188414,"results":"20","hashOfConfig":"16"},{"size":2742,"mtime":1620502893327,"results":"21","hashOfConfig":"16"},{"size":1314,"mtime":1619904603027,"results":"22","hashOfConfig":"16"},{"size":834,"mtime":1619903381015,"results":"23","hashOfConfig":"16"},{"size":413,"mtime":1619904264541,"results":"24","hashOfConfig":"16"},{"size":3795,"mtime":1619975526239,"results":"25","hashOfConfig":"16"},{"size":418,"mtime":1619904270420,"results":"26","hashOfConfig":"16"},{"size":3792,"mtime":1619975905326,"results":"27","hashOfConfig":"16"},{"size":431,"mtime":1619695562840,"results":"28","hashOfConfig":"16"},{"size":923,"mtime":1619903381016,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"1bflvez",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"32"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"32"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"32"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"32"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"C:\\Users\\UsmanFayyaz\\React apps\\digital-try-room\\src\\index.js",[],["63","64"],"C:\\Users\\UsmanFayyaz\\React apps\\digital-try-room\\src\\App.js",[],"C:\\Users\\UsmanFayyaz\\React apps\\digital-try-room\\src\\serviceWorkerRegistration.js",[],"C:\\Users\\UsmanFayyaz\\React apps\\digital-try-room\\src\\reportWebVitals.js",[],"C:\\Users\\UsmanFayyaz\\React apps\\digital-try-room\\src\\pages\\login.js",[],"C:\\Users\\UsmanFayyaz\\React apps\\digital-try-room\\src\\pages\\SignUp.js",[],"C:\\Users\\UsmanFayyaz\\React apps\\digital-try-room\\src\\pages\\ForgetPassword.js",[],"C:\\Users\\UsmanFayyaz\\React apps\\digital-try-room\\src\\pages\\Home.js",[],"C:\\Users\\UsmanFayyaz\\React apps\\digital-try-room\\src\\pages\\instructions\\FirstStepIntructions.js",["65"],"import React from \"react\";\r\n\r\nimport GuideImage from '../../images/guide.jpeg'\r\n\r\nconst FirstStepIntructions = (props) => {\r\n  return (\r\n    <div>\r\n      <img alt=\"Guide Image\" className=\"guide-image\" src={GuideImage}></img>\r\n      <div>\r\n        <button className=\"capture-buttons button-hover\" onClick={props.nextStep}>Next Step</button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default FirstStepIntructions;","C:\\Users\\UsmanFayyaz\\React apps\\digital-try-room\\src\\pages\\imageCapture\\FirstImageCapture.js",["66","67"],"import React, { useRef, useCallback, useState } from \"react\"\r\nimport Webcam from \"react-webcam\";\r\nimport * as bodyPix from \"@tensorflow-models/body-pix\";\r\n\r\nimport helperImage from '../../images/helper.jpg';\r\n\r\nconst videoConstraints = {\r\n  facingMode: \"user\"\r\n};\r\n\r\nconst FirstImageCapture = (props) => {\r\n  const [isResult, setIsResult] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [tempImage, setTempImage] = useState('');\r\n  const [canvasShow, setCanvasShow] = useState(false);\r\n  const [isImageUpload, setIsImageUpload] = useState(false);\r\n  const webcamRef = useRef(null);\r\n  // const canvasRef = useRef(null);\r\n\r\n  var imageSrc;\r\n\r\n  const runBodySegment = async () => {\r\n    setIsResult(true);\r\n    setIsLoading(true);\r\n    const net = await bodyPix.load();\r\n    console.log(\"BodyPix model loaded.\");\r\n    //  Loop and detect hands\r\n    var image = document.getElementById(\"temp-image\");\r\n\r\n    const segmentation = await net.segmentPersonParts(image, {\r\n      flipHorizontal: false,\r\n      internalResolution: 'medium',\r\n      segmentationThreshold: 0.7\r\n    });\r\n    console.log(segmentation);\r\n\r\n    setCanvasShow(true);\r\n    imageUploadSuccess();\r\n    const coloredPartImage = bodyPix.toColoredPartMask(segmentation);\r\n    const opacity = 0.7;\r\n    const flipHorizontal = false;\r\n    const maskBlurAmount = 0;\r\n    const canvas = document.getElementById('canvas');\r\n    // Draw the colored part image on top of the original image onto a canvas.\r\n    // The colored part image will be drawn semi-transparent, with an opacity of\r\n    // 0.7, allowing for the original image to be visible under.\r\n    bodyPix.drawMask(\r\n      canvas, image, coloredPartImage, opacity, maskBlurAmount,\r\n      flipHorizontal);\r\n    setIsLoading(false);\r\n  }\r\n\r\n  const imageUploadSuccess = () => {\r\n    setTimeout(() => { setIsImageUpload(true) }, 3000);\r\n    setIsImageUpload(false);\r\n  }\r\n\r\n  const capture = useCallback(\r\n    () => {\r\n      imageSrc = webcamRef.current.getScreenshot();\r\n      console.log(\"debugging\", imageSrc)\r\n      setTempImage(imageSrc);\r\n    },\r\n    [webcamRef]\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      {isLoading && (\r\n        <div>\r\n          <div className=\"loader\"></div>\r\n          <p className=\"loding-text\">Please wait for processing..</p>\r\n        </div>\r\n      )}\r\n\r\n      {isResult === false ? (\r\n        <>\r\n          <div className=\"parent\">\r\n            <div id=\"guide-image\" className=\"child1\">\r\n              <img alt=\"\" src={helperImage} />\r\n            </div>\r\n\r\n            <div className=\"child2\">\r\n              <Webcam\r\n                audio={false}\r\n                ref={webcamRef}\r\n                id=\"webcam-preview\"\r\n                screenshotFormat=\"image/jpeg\"\r\n                videoConstraints={videoConstraints}\r\n              />\r\n            </div>\r\n          </div>\r\n          <button className=\"button-hover capture-buttons\" onClick={() => { capture(); runBodySegment(); }}>Capture photo</button>\r\n        </>\r\n      ) : (\r\n          canvasShow &&\r\n          <>\r\n            {!isImageUpload &&\r\n              <div>upload successful</div>}\r\n            <canvas\r\n              id=\"canvas\"\r\n              style={{\r\n                position: \"absolute\",\r\n                marginLeft: \"auto\",\r\n                marginRight: \"auto\",\r\n                left: 0,\r\n                right: 0,\r\n                textAlign: \"center\",\r\n                zindex: 9,\r\n                width: 640,\r\n                height: 480,\r\n              }}\r\n            />\r\n            <button className=\"next-button-image-capture button-hover\" onClick={props.nextStep}>Next Step</button>\r\n          </>\r\n        )}\r\n\r\n      <img id=\"temp-image\" src={tempImage} style={{ display: \"none\" }} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default FirstImageCapture;","C:\\Users\\UsmanFayyaz\\React apps\\digital-try-room\\src\\pages\\instructions\\SecondStepIntructions.js",["68"],"import React from \"react\";\r\n\r\nimport GuideImage from '../../images/guide1.jpeg'\r\n\r\nconst SecondStepInstructions = (props) => {\r\n  return (\r\n    <div>\r\n      <img alt=\"Guide Image\" className=\"guide-image\" src={GuideImage}></img>\r\n      <div>\r\n        <button className=\"capture-buttons button-hover\" onClick={props.nextStep}>Next Step</button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SecondStepInstructions;","C:\\Users\\UsmanFayyaz\\React apps\\digital-try-room\\src\\pages\\imageCapture\\SecondImageCapture.js",["69","70"],"import React, { useRef, useCallback, useState } from \"react\"\r\nimport Webcam from \"react-webcam\";\r\nimport * as bodyPix from \"@tensorflow-models/body-pix\";\r\n\r\nimport helperImage from '../../images/helper1.jpg';\r\n\r\nconst videoConstraints = {\r\n  facingMode: \"user\"\r\n};\r\n\r\nconst SecondImageCapture = (props) => {\r\n  const [isResult, setIsResult] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [tempImage, setTempImage] = useState('');\r\n  const [canvasShow, setCanvasShow] = useState(false);\r\n  const [isImageUpload, setIsImageUpload] = useState(false);\r\n  const webcamRef = useRef(null);\r\n  // const canvasRef = useRef(null);\r\n\r\n  var imageSrc;\r\n\r\n  const runBodySegment = async () => {\r\n    setIsResult(true);\r\n    setIsLoading(true);\r\n    const net = await bodyPix.load();\r\n    console.log(\"BodyPix model loaded.\");\r\n    //  Loop and detect hands\r\n    var image = document.getElementById(\"temp-image1\");\r\n\r\n    const segmentation = await net.segmentPersonParts(image, {\r\n      flipHorizontal: false,\r\n      internalResolution: 'medium',\r\n      segmentationThreshold: 0.7\r\n    });\r\n    console.log(segmentation);\r\n\r\n    setCanvasShow(true);\r\n    imageUploadSuccess();\r\n    const coloredPartImage = bodyPix.toColoredPartMask(segmentation);\r\n    const opacity = 0.7;\r\n    const flipHorizontal = false;\r\n    const maskBlurAmount = 0;\r\n    const canvas = document.getElementById('canvas-two');\r\n    // Draw the colored part image on top of the original image onto a canvas.\r\n    // The colored part image will be drawn semi-transparent, with an opacity of\r\n    // 0.7, allowing for the original image to be visible under.\r\n    bodyPix.drawMask(\r\n      canvas, image, coloredPartImage, opacity, maskBlurAmount,\r\n      flipHorizontal);\r\n    setIsLoading(false);\r\n  }\r\n\r\n  const imageUploadSuccess = () => {\r\n    setTimeout(() => { setIsImageUpload(true) }, 3000);\r\n    setIsImageUpload(false);\r\n  }\r\n\r\n\r\n  const capture = useCallback(\r\n    () => {\r\n      imageSrc = webcamRef.current.getScreenshot();\r\n      console.log(\"debugging\", imageSrc)\r\n      setTempImage(imageSrc);\r\n    },\r\n    [webcamRef]\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      {isLoading && <div>\r\n        <div className=\"loader\"></div>\r\n        <p className=\"loding-text\">Please wait for processing..</p>\r\n      </div>\r\n      }\r\n\r\n      {isResult === false ? (\r\n        <>\r\n          <div className=\"parent\">\r\n            <div id=\"guide-image\" className=\"child1\">\r\n              <img alt=\"\" src={helperImage} />\r\n            </div>\r\n\r\n            <div className=\"child2\">\r\n              <Webcam\r\n                audio={false}\r\n                ref={webcamRef}\r\n                id=\"webcam-preview\"\r\n                screenshotFormat=\"image/jpeg\"\r\n                videoConstraints={videoConstraints}\r\n              />\r\n            </div>\r\n          </div>\r\n          <button className=\"button-hover capture-buttons\" onClick={() => { capture(); runBodySegment(); }}>Capture photo</button>\r\n        </>\r\n      ) : (\r\n          canvasShow &&\r\n          <>\r\n            {!isImageUpload &&\r\n              <div>upload successful</div>}\r\n            <canvas\r\n              id=\"canvas-two\"\r\n              style={{\r\n                position: \"absolute\",\r\n                marginLeft: \"auto\",\r\n                marginRight: \"auto\",\r\n                left: 0,\r\n                right: 0,\r\n                textAlign: \"center\",\r\n                zindex: 9,\r\n                width: 640,\r\n                height: 480,\r\n              }}\r\n            />\r\n            <button className=\"next-button-image-capture button-hover\" onClick={props.nextStep}>Next Step</button>\r\n          </>\r\n        )}\r\n\r\n      <img id=\"temp-image1\" src={tempImage} style={{ display: \"none\" }} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SecondImageCapture;","C:\\Users\\UsmanFayyaz\\React apps\\digital-try-room\\src\\components\\nav.js",[],"C:\\Users\\UsmanFayyaz\\React apps\\digital-try-room\\src\\pages\\Measurements.js",[],{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","replacedBy":"74"},{"ruleId":"75","severity":1,"message":"76","line":8,"column":7,"nodeType":"77","endLine":8,"endColumn":53},{"ruleId":"78","severity":1,"message":"79","line":60,"column":18,"nodeType":"80","endLine":60,"endColumn":51},{"ruleId":"75","severity":1,"message":"76","line":118,"column":7,"nodeType":"77","endLine":118,"endColumn":74},{"ruleId":"75","severity":1,"message":"76","line":8,"column":7,"nodeType":"77","endLine":8,"endColumn":53},{"ruleId":"78","severity":1,"message":"79","line":61,"column":18,"nodeType":"80","endLine":61,"endColumn":51},{"ruleId":"75","severity":1,"message":"76","line":118,"column":7,"nodeType":"77","endLine":118,"endColumn":75},"no-native-reassign",["81"],"no-negated-in-lhs",["82"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","react-hooks/exhaustive-deps","Assignments to the 'imageSrc' variable from inside React Hook useCallback will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useCallback.","CallExpression","no-global-assign","no-unsafe-negation"]